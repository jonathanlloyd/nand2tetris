// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Invert f control bit
    Not(in=instruction[7], out=fControl);

    ALU(
        x=dRegO,
        y=muxBO,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluO,
        out[15]=aluSignBit,
        out=outM
    );
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // Write to memory on c instructions with the 3rd bit set
    And(a=cInstruction, b=instruction[3], out=writeM);

    // Left mux
    Mux16(a=aluO, b[0..14]=instruction[0..14], sel=aInstruction, out=muxAO);
    // Right mux
    Mux16(a=aRegO, b=inM, sel=instruction[12], out=muxBO);

    // A Register
    // Store A if it's an A instruction or the output is A
    Or(a=instruction[5], b=aInstruction, out=loadA);
    ARegister(in=muxAO, load=loadA, out=aRegO, out[0..14]=addressM);
    // D Register
    And(a=instruction[4], b=cInstruction, out=loadD);
    DRegister(in=aluO, load=loadD, out=dRegO);

    // Comparisons
    // Not Equals 0
    Or16Way(in=aluO, out=notEq0);
    // Equals 0
    Not(in=notEq0, out=eq0);
    // < 0
    And(a=aluSignBit, b=aluSignBit, out=lt0);
    // > 0
    Or(a=eq0, b=lt0, out=ltEq0);
    Not(in=ltEq0, out=gt0);

    And(a=instruction[2], b=lt0, out=j1);
    And(a=instruction[1], b=eq0, out=j2);
    And(a=instruction[0], b=gt0, out=j3);

    Or(a=j1, b=j2, out=jOrA);
    Or(a=j3, b=jOrA, out=jOrB);
    And(a=cInstruction, b=jOrB, out=shouldJump);
    Not(in=shouldJump, out=notShouldJump);

    // Program counter
    PC(in=aRegO, load=shouldJump, inc=notShouldJump, reset=reset, out[0..14]=pc);
}
